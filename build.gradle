plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'org.openapi.generator' version '7.4.0'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = "com.example"
version = "1.0.0-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_21

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext {
    set('springCloudVersion', '2025.0.0-RC1')
    set('springdocVersion', '2.5.0')
    set('lombokVersion', '1.18.30')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {

    // --- Spring Boot ---
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // --- OpenAPI ---
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-common:${springdocVersion}"
    implementation 'org.openapitools:jackson-databind-nullable:0.2.4'

    // --- Dev Tools ---
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // --- Lombok ---
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // --- Test ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // --- Runtime ---
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'com.h2database:h2'


}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets.main.java.srcDir "$buildDir/generated/src/main/java"

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/FormatData_*.class',
                        '**/META-INF/**',
                        '**/*Application**',
                        '**/*Exception.class',
                        '**/PricingControllerApi.class',
                        '**/ApiUtil.class',
                        '**/config/**',
                        '**/model/**',
                ])
            })
    )
}

// OpenAPI Generator
openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/openapi.yaml")
    outputDir.set("$buildDir/generated")
    apiPackage.set("com.ecommerce.pricing.infrastructure.controller.api")
    modelPackage.set("com.ecommerce.pricing.domain.model")
    invokerPackage.set("com.ecommerce.pricing")
    configOptions.set([
            basePackage        : "com.ecommerce.pricing",
            useSwaggerAnnotations: "false",
            interfaceOnly      : "true",
            useSpringBoot3     : "true",
            reactive           : "true",
            dateLibrary        : "java8",
            useTags            : "true",
            controllerName     : "PricingApi"
    ])
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", System.getenv("SONAR_TOKEN")
        property "sonar.projectKey", "api-pricing-service"
        property "sonar.projectName", "API Pricing Service"
        property "sonar.projectVersion", "1.0"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.coverage.exclusions", """
                    **/*Test.java,
                    **/steps/**,
                    **/config/**,
                    **/*Application**,
                    **/ApiUtil.class,
                    **/model/**
                    **/entity/**
    """
    }
}
